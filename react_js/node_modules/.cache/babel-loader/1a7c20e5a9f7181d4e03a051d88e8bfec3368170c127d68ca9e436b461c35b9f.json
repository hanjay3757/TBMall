{"ast":null,"code":"var _jsxFileName = \"C:\\\\JWH\\\\vsc\\\\study\\\\team\\\\src\\\\components\\\\ReadContent.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport './ReadContent.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ReadContent = ({\n  isAdmin,\n  userInfo\n}) => {\n  _s();\n  const location = useLocation();\n  const params = new URLSearchParams(location.search);\n  const boardNo = params.get('board_no'); // URL에서 board_no 파라미터 가져오기\n  const [board, setBoard] = useState(null); // 게시물 정보를 저장할 상태\n  const navigate = useNavigate();\n  // const [comments, setComments] = useState([]); // 댓글 정보를 저장할 상태\n  // const [newComment, setNewComment] = useState(''); // 새로운 댓글 내용\n  // const [currentComment, setCurrentComment] = useState(1); // 현재 댓글 페이지\n  // const [totalComment, setTotalComment] = useState(0); // 전체 댓글 수\n  // const [cpageSize, setCpageSize] = useState(5); // 페이지당 댓글 수\n  // const [loading, setLoading] = useState(false); // 로딩 상태 관리\n\n  // // 댓글 작성 함수\n  // const handleCommentSubmit = (e) => {\n  //   e.preventDefault();\n\n  //   if (!newComment.trim()) {\n  //     alert('댓글 내용을 입력해 주세요.');\n  //     return;\n  //   }\n\n  //   axios\n  //     .post(\n  //       '/board/comment',\n  //       { comment_content: newComment },\n  //       { withCredentials: true } // 세션 유지 설정\n  //     )\n  //     .then((response) => {\n  //       if (response.data.success) {\n  //         const newCommentObj = {\n  //           comment_content: response.data.comment_content,\n  //           member_no: response.data.member_no,\n  //           comment_writedate: new Date(response.data.comment_writedate).toLocaleString(),\n  //         };\n\n  //         setComments((prevComments) => [newCommentObj, ...prevComments]); // 새 댓글을 맨 위에 추가\n  //         setNewComment(''); // 입력 필드 초기화\n  //       } else {\n  //         alert(response.data.message || '댓글 작성에 실패했습니다.');\n  //       }\n  //     })\n  //     .catch((error) => {\n  //       console.error('댓글 작성 중 오류 발생:', error);\n  //       alert('댓글 작성에 실패했습니다.');\n  //     });\n  // };\n\n  // // 서버에서 댓글 목록 가져오기\n  // const loadComment = useCallback(async () => {\n  //   setLoading(true);\n  //   try {\n  //     const response = await axios.get('/board/commentlist', {\n  //       params: { board_no: boardNo, currentComment, cpageSize },\n  //       withCredentials: true,\n  //     });\n  //     const { comments = [], totalComment } = response.data;\n  //     console.log('Fetched comment:', comments);\n  //     console.log('Total Pages:', totalComment);\n  //     setComments(comments);\n  //     setTotalComment(totalComment); // 전체 페이지 수 설정\n  //   } catch (error) {\n  //     console.error('댓글 목록을 불러오는 중 오류 발생:', error);\n  //   } finally {\n  //     setLoading(false); // 로딩 상태 해제\n  //   }\n  // }, [boardNo, currentComment, cpageSize]);\n\n  // const handlePageChange = (newPage) => {\n  //   if (newPage > 0 && newPage <= totalComment) {\n  //     setCurrentComment(newPage); // 페이지 변경\n  //     loadComment(); // 새 페이지 댓글 로드\n  //   }\n  // };\n\n  // 관리자 권한 체크\n  const checkAdminAuth = () => {\n    if (userInfo && userInfo.member_role === 'ADMIN') {\n      console.log('관리자 권한 확인:', {\n        isAdmin: true,\n        userInfo: userInfo,\n        member_role: userInfo.member_role\n      });\n      return true;\n    }\n    console.log('관리자 권한 확인:', {\n      isAdmin: false,\n      userInfo: userInfo,\n      member_role: userInfo === null || userInfo === void 0 ? void 0 : userInfo.member_role\n    });\n    return false;\n  };\n  useEffect(() => {\n    const fetchBoard = async () => {\n      try {\n        const response = await axios.get('/board/read', {\n          params: {\n            board_no: boardNo\n          },\n          withCredentials: true\n        });\n        setBoard(response.data);\n        console.log('게시글 데이터:', response.data);\n      } catch (error) {\n        console.error('게시물 데이터를 불러오는 중 오류 발생:', error);\n      }\n    };\n    fetchBoard();\n  }, [boardNo]);\n  if (!board) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uAC8C\\uC2DC\\uBB3C\\uC744 \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }, this);\n  }\n  const hasAdminAuth = checkAdminAuth();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board-detail-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-detail-title\",\n      children: board.board_title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-detail-content\",\n      children: board.board_content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-detail-buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"board-detail-back-button\",\n        onClick: e => {\n          e.preventDefault();\n          navigate(-1); // 뒤로 가기\n        },\n        children: \"\\uBAA9\\uB85D\\uC73C\\uB85C \\uB3CC\\uC544\\uAC00\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }, this), hasAdminAuth && /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"#\",\n        className: \"board-edit-button\",\n        onClick: e => {\n          e.preventDefault();\n          navigate(`/board/editContent?board_no=${board.board_no}`); // 글 수정\n        },\n        children: \"\\uAE00 \\uC218\\uC815\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(ReadContent, \"4GRzRqusJOY+LZios5248Ztd/Ho=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = ReadContent;\nexport default ReadContent;\nvar _c;\n$RefreshReg$(_c, \"ReadContent\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","axios","useLocation","useNavigate","jsxDEV","_jsxDEV","ReadContent","isAdmin","userInfo","_s","location","params","URLSearchParams","search","boardNo","get","board","setBoard","navigate","checkAdminAuth","member_role","console","log","fetchBoard","response","board_no","withCredentials","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","hasAdminAuth","className","board_title","board_content","href","onClick","e","preventDefault","_c","$RefreshReg$"],"sources":["C:/JWH/vsc/study/team/src/components/ReadContent.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport './ReadContent.css';\r\n\r\nconst ReadContent = ({ isAdmin, userInfo }) => {\r\n  const location = useLocation();\r\n  const params = new URLSearchParams(location.search);\r\n  const boardNo = params.get('board_no'); // URL에서 board_no 파라미터 가져오기\r\n  const [board, setBoard] = useState(null); // 게시물 정보를 저장할 상태\r\n  const navigate = useNavigate();\r\n  // const [comments, setComments] = useState([]); // 댓글 정보를 저장할 상태\r\n  // const [newComment, setNewComment] = useState(''); // 새로운 댓글 내용\r\n  // const [currentComment, setCurrentComment] = useState(1); // 현재 댓글 페이지\r\n  // const [totalComment, setTotalComment] = useState(0); // 전체 댓글 수\r\n  // const [cpageSize, setCpageSize] = useState(5); // 페이지당 댓글 수\r\n  // const [loading, setLoading] = useState(false); // 로딩 상태 관리\r\n\r\n  // // 댓글 작성 함수\r\n  // const handleCommentSubmit = (e) => {\r\n  //   e.preventDefault();\r\n\r\n  //   if (!newComment.trim()) {\r\n  //     alert('댓글 내용을 입력해 주세요.');\r\n  //     return;\r\n  //   }\r\n\r\n  //   axios\r\n  //     .post(\r\n  //       '/board/comment',\r\n  //       { comment_content: newComment },\r\n  //       { withCredentials: true } // 세션 유지 설정\r\n  //     )\r\n  //     .then((response) => {\r\n  //       if (response.data.success) {\r\n  //         const newCommentObj = {\r\n  //           comment_content: response.data.comment_content,\r\n  //           member_no: response.data.member_no,\r\n  //           comment_writedate: new Date(response.data.comment_writedate).toLocaleString(),\r\n  //         };\r\n\r\n  //         setComments((prevComments) => [newCommentObj, ...prevComments]); // 새 댓글을 맨 위에 추가\r\n  //         setNewComment(''); // 입력 필드 초기화\r\n  //       } else {\r\n  //         alert(response.data.message || '댓글 작성에 실패했습니다.');\r\n  //       }\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.error('댓글 작성 중 오류 발생:', error);\r\n  //       alert('댓글 작성에 실패했습니다.');\r\n  //     });\r\n  // };\r\n\r\n  // // 서버에서 댓글 목록 가져오기\r\n  // const loadComment = useCallback(async () => {\r\n  //   setLoading(true);\r\n  //   try {\r\n  //     const response = await axios.get('/board/commentlist', {\r\n  //       params: { board_no: boardNo, currentComment, cpageSize },\r\n  //       withCredentials: true,\r\n  //     });\r\n  //     const { comments = [], totalComment } = response.data;\r\n  //     console.log('Fetched comment:', comments);\r\n  //     console.log('Total Pages:', totalComment);\r\n  //     setComments(comments);\r\n  //     setTotalComment(totalComment); // 전체 페이지 수 설정\r\n  //   } catch (error) {\r\n  //     console.error('댓글 목록을 불러오는 중 오류 발생:', error);\r\n  //   } finally {\r\n  //     setLoading(false); // 로딩 상태 해제\r\n  //   }\r\n  // }, [boardNo, currentComment, cpageSize]);\r\n\r\n  // const handlePageChange = (newPage) => {\r\n  //   if (newPage > 0 && newPage <= totalComment) {\r\n  //     setCurrentComment(newPage); // 페이지 변경\r\n  //     loadComment(); // 새 페이지 댓글 로드\r\n  //   }\r\n  // };\r\n\r\n  // 관리자 권한 체크\r\n  const checkAdminAuth = () => {\r\n    if (userInfo && userInfo.member_role === 'ADMIN') {\r\n      console.log('관리자 권한 확인:', {\r\n        isAdmin: true,\r\n        userInfo: userInfo,\r\n        member_role: userInfo.member_role\r\n      });\r\n      return true;\r\n    }\r\n    console.log('관리자 권한 확인:', {\r\n      isAdmin: false,\r\n      userInfo: userInfo,\r\n      member_role: userInfo?.member_role\r\n    });\r\n    return false;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchBoard = async () => {\r\n      try {\r\n        const response = await axios.get('/board/read', { \r\n          params: { board_no: boardNo },\r\n          withCredentials: true \r\n        });\r\n        setBoard(response.data);\r\n        console.log('게시글 데이터:', response.data);\r\n      } catch (error) {\r\n        console.error('게시물 데이터를 불러오는 중 오류 발생:', error);\r\n      }\r\n    };\r\n\r\n    fetchBoard();\r\n  }, [boardNo]);\r\n\r\n  if (!board) {\r\n    return <div>게시물을 불러오는 중...</div>;\r\n  }\r\n\r\n  const hasAdminAuth = checkAdminAuth();\r\n\r\n  return (\r\n    <div className=\"board-detail-container\">\r\n      <div className=\"board-detail-title\">{board.board_title}</div>\r\n      <div className=\"board-detail-content\">{board.board_content}</div>\r\n\r\n      <div className=\"board-detail-buttons\">\r\n        <a\r\n          href=\"#\"\r\n          className=\"board-detail-back-button\"\r\n          onClick={(e) => {\r\n            e.preventDefault();\r\n            navigate(-1); // 뒤로 가기\r\n          }}\r\n        >\r\n          목록으로 돌아가기\r\n        </a>\r\n\r\n        {hasAdminAuth && (\r\n          <a\r\n            href=\"#\"\r\n            className=\"board-edit-button\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              navigate(`/board/editContent?board_no=${board.board_no}`); // 글 수정\r\n            }}\r\n          >\r\n            글 수정\r\n          </a>\r\n        )}\r\n      </div>\r\n\r\n      {/* <div className=\"comment-section\">\r\n        <h3>댓글</h3>\r\n        {loading ? (\r\n          <p>댓글을 불러오는 중...</p>\r\n        ) : comments.length === 0 ? (\r\n          <p>댓글이 없습니다.</p>\r\n        ) : (\r\n          comments.map((comment, index) => (\r\n            <div key={index} className=\"comment-item\">\r\n              <p>작성자: {comment.member_no}</p>\r\n              <p>{comment.comment_content}</p>\r\n              <p>작성일: {comment.comment_writedate}</p>\r\n            </div>\r\n          ))\r\n        )}\r\n\r\n        <div className=\"pagination\">\r\n          <button onClick={() => handlePageChange(currentComment - 1)} disabled={currentComment === 1}>\r\n            이전\r\n          </button>\r\n          <span>\r\n            {currentComment} / {totalComment}\r\n          </span>\r\n          <button\r\n            onClick={() => handlePageChange(currentComment + 1)}\r\n            disabled={currentComment === totalComment}\r\n          >\r\n            다음\r\n          </button>\r\n        </div>\r\n\r\n        <textarea\r\n          placeholder=\"댓글을 입력하세요.\"\r\n          value={newComment}\r\n          onChange={(e) => setNewComment(e.target.value)}\r\n        />\r\n        <button onClick={handleCommentSubmit}>댓글 작성</button>\r\n      </div> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReadContent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}