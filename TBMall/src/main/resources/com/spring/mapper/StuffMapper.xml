<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring.mapper.StuffMapper">
    <!-- 물건 목록 조회 -->
   <!-- 물건 목록 조회 -->
<select id="getItemList" parameterType="com.spring.dto.PagingDto" resultType="com.spring.dto.StuffDto">
    SELECT 
        s.item_id,
        s.item_name,
        s.item_price,
        s.item_stock,
        s.item_description,
        s.image_url,
        s.reg_date,
        s.admin_no,
        m.member_delete,
        s.item_delete,
        CASE WHEN o.order_id IS NOT NULL THEN true ELSE false END as in_cart
    FROM 
        tbmall_stuff s
        JOIN tbmall_admin a ON s.admin_no = a.admin_no
        JOIN tbmall_member m ON a.member_no = m.member_no
        LEFT JOIN tbmall_orders o ON s.item_id = o.item_id
    WHERE 
        (m.member_delete = 0 OR m.member_delete IS NULL)
        AND (s.item_delete = 0 OR s.item_delete IS NULL
            OR o.order_id IS NOT NULL)  -- 장바구니에 있는 아이템은 삭제되어도 표시
    LIMIT #{limit} 
    OFFSET #{offset}
</select>

<!-- 전체 등록 물건 개수 -->
<select id="getCountItemList" resultType="int">
	SELECT 
        count(*)
    FROM 
        tbmall_stuff s
        JOIN tbmall_admin a ON s.admin_no = a.admin_no
        JOIN tbmall_member m ON a.member_no = m.member_no
        LEFT JOIN tbmall_orders o ON s.item_id = o.item_id
    WHERE 
        (m.member_delete = 0 OR m.member_delete IS NULL)
        AND (s.item_delete = 0 OR s.item_delete IS NULL
            OR o.order_id IS NOT NULL)
</select>
    
    <!-- 물건 등록 -->
    <insert id="registerItem">
        INSERT INTO tbmall_stuff (
            item_name,
            item_price,
            item_stock,
            item_description,
            image_url,
            admin_no
        ) VALUES (
            #{item_name},
            #{item_price},
            #{item_stock},
            #{item_description},
            #{image_url},
            #{admin_no}
        )
    </insert>
    
    <!-- 물건 조회 -->
    <select id="getItem" resultType="com.spring.dto.StuffDto">
        SELECT 
            s.item_id,
            s.item_name,
            s.item_price,
            s.item_stock,
            s.item_description,
            s.image_url,
            s.reg_date,
            s.admin_no,
            s.item_delete,
            s.delete_date,
            m.member_delete
        FROM 
            tbmall_stuff s
            JOIN tbmall_admin a ON s.admin_no = a.admin_no
            JOIN tbmall_member m ON a.member_no = m.member_no
        WHERE 
            s.item_id = #{item_id}
    </select>
    
    <!-- 물건 수정 -->
    <update id="updateItem">
        UPDATE tbmall_stuff 
        SET 
            item_name = #{item_name},
            item_price = #{item_price},
            item_stock = #{item_stock},
            item_description = #{item_description},
            image_url = #{image_url}
        WHERE 
            item_id = #{item_id}
            AND admin_no = #{admin_no}
    </update>
    
    <!-- 재고 업데이트 -->
    <update id="updateStock">
        UPDATE tbmall_stuff 
        SET item_stock = item_stock + #{quantity}
        WHERE item_id = #{itemId}
    </update>
    
    <!-- 재고 확인 -->
    <select id="checkStock" resultType="int">
        SELECT item_stock 
        FROM tbmall_stuff 
        WHERE item_id = #{itemId}
    </select>
    
    <!-- 물건 삭제 (소프트 삭제) -->
    <update id="deleteItem">
        UPDATE tbmall_stuff 
        SET item_delete = 1,
            delete_date = CURRENT_TIMESTAMP
        WHERE item_id = #{item_id}
    </update>
    
    <!-- 물건 복구 -->
    <update id="restoreItem">
    UPDATE tbmall_stuff 
    SET 
        item_delete = 0,
        delete_date = NULL,
        item_stock = 1  <!-- 재고를 1개로 설정 -->
    WHERE item_id = #{itemId}
</update>
    
    <!-- 삭제된 물건 목록 조회 -->
    <select id="getDeletedItems" resultType="com.spring.dto.StuffDto">
        SELECT 
            s.*, m.member_delete
        FROM 
            tbmall_stuff s
            JOIN tbmall_admin a ON s.admin_no = a.admin_no
            JOIN tbmall_member m ON a.member_no = m.member_no
        WHERE 
            s.item_delete = 1
        ORDER BY 
            s.item_id DESC
    </select>
    
    <!-- 삭제된 물건 목록 조회 -->
    <select id="getDeletedItemList" resultType="com.spring.dto.StuffDto">
        SELECT 
            s.*,
            m.member_delete
        FROM 
            tbmall_stuff s
            JOIN tbmall_admin a ON s.admin_no = a.admin_no
            JOIN tbmall_member m ON a.member_no = m.member_no
        WHERE 
            s.item_delete = 1
        ORDER BY 
            s.delete_date DESC
    </select>
    
    <!-- 장바구니 아이템 조회 -->
    <select id="getCartItems" resultType="com.spring.dto.CartDto">
        SELECT 
            o.order_id as cartId,
            o.item_id as itemId,
            o.member_no as memberNo,
            o.order_quantity as quantity,
            s.item_name as itemName,
            s.item_price as itemPrice,
            s.item_stock as itemStock,
            s.image_url as imageUrl,
            (s.item_price * o.order_quantity) as totalPrice,
            o.order_date as orderDate,
            s.item_delete as itemDelete
        FROM 
            tbmall_orders o
            JOIN tbmall_stuff s ON o.item_id = s.item_id
        WHERE 
            o.member_no = #{member_no}
            AND s.item_delete = false
        ORDER BY 
            o.order_date DESC
    </select>
    <update id="decreaseStock">
    UPDATE tbmall_stuff 
    SET item_stock = item_stock - #{quantity}
    WHERE item_id = #{itemId} 
    AND item_stock >= #{quantity}
</update>
    <!-- 장바구니에 추가 -->
   <insert id="addToCart">
    INSERT INTO tbmall_orders (
        member_no,
        item_id,
        order_quantity,
        order_date
    ) 
    SELECT 
        #{userId},
        #{itemId},
        #{quantity},
        CURRENT_TIMESTAMP
    FROM tbmall_stuff
    WHERE item_id = #{itemId}
    AND item_stock >= #{quantity}
</insert>
    
    <!-- 장바구니 아이템 삭제 -->
    <delete id="removeFromCart">
        DELETE FROM tbmall_orders 
        WHERE order_id = #{cartId}
    </delete>
    
    <!-- 장바구니 비우기 -->
    <delete id="clearCart">
        DELETE FROM tbmall_orders 
        WHERE member_no = #{member_no}
    </delete>
    
    <!-- 장바구니 아이템 단일 조회 -->
    <select id="getCartItem" resultType="com.spring.dto.CartDto">
        SELECT 
            o.order_id as cartId,
            o.member_no as memberNo,
            o.item_id as itemId,
            o.order_quantity as quantity,
            s.item_name as itemName,
            s.item_price as itemPrice,
            s.item_stock as itemStock,
            s.image_url as imageUrl,
            (s.item_price * o.order_quantity) as totalPrice,
            o.order_date as orderDate
        FROM 
            tbmall_orders o
            JOIN tbmall_stuff s ON o.item_id = s.item_id
        WHERE 
            o.order_id = #{cartId}
    </select>
    
    <!-- 장바구니 수량 업데이트 -->
    <update id="updateCartItemQuantity">
        UPDATE tbmall_orders 
        SET order_quantity = #{quantity}
        WHERE order_id = #{cartId}
    </update>
</mapper> 